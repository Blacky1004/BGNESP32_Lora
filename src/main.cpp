#include <Arduino.h>
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <SPIFFS.h>
#include <ArduinoJson.h>
#include "ESPAsyncWebServer.h"
#include <AsyncTCP.h>
#include <AsyncJson.h>
#include <lmic.h>
#include <hal\hal.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include "DHTesp.h"
#include "SDS011.h"

#define SCK 5
#define MISO 19
#define MOSI 27
#define SS 18
#define RST 14
#define DIO0 26

#define KONFIG_MODE 0
#define WLAN_MODE 2
#define LORA_MODE 4

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels

#define FORMAT_SPIFFS_IF_FAILED true

#define DEFAULT_AP_START "BNG" 

AsyncWebServer server(80);

//Unsere SSID im AP Mode = BGN-CHIPID
String mySSID ="";

uint32_t chipId = 0;
bool loraAvailable = false;
uint8_t aktualKonfigMode = KONFIG_MODE;

//LoRa TTN Device-Daten
static u1_t NWKSKEY[16];
static u1_t APPSKEY[16];
static u4_t DEVADDR;

void os_getArtEui (u1_t* buf) { }
void os_getDevEui (u1_t* buf) { }
void os_getDevKey (u1_t* buf) { }

static osjob_t sendjob;
const unsigned TX_INTERVAL = 60;

const lmic_pinmap lmic_pins = { // Pins des TTGO ESP32 LoRa Board
  .nss = 18,
  .rxtx = LMIC_UNUSED_PIN,
  .rst = 14,
  .dio = {26, 33, 32},
};
//LCD Screen
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RST);

//-> Defaultkonfiguration
const char esp_default_config[] PROGMEM = R"rawliteral(
{
	"wifi": {
		"ssid":"",
		"password":""
	},
	"location":{
		"latitude": 0,
		"longitude": 0,
		"height": 0
	},
	"lora":{
		"enabled": false,
		"c0": true,
		"c1": true,
		"c2": true,
		"c3": true,
		"c4": true,
		"c5": true,
		"c6": true,
		"c7": true,
        "newskey":[],
        "appskey":[],
        "devid":"260B19DF"
	},
	"data_setup":{
		"preferred":"lora_and_wlan"
	}
}	
)rawliteral";
StaticJsonDocument<512> config;
//<- Ende Defaultkonfiguration

//-> Flashdaten
const unsigned char lcdlogo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfd, 0x01, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x3f, 0xff, 0xc0, 0x1f, 0xf8, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0xff, 0xff, 0xf0, 0xff, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0xff, 0x7e, 0x9f, 0xf7, 0xe7, 0xb6, 0x40, 0x00, 0x08, 0x00, 0x00, 0x3f, 0xff, 0xbf, 0xf3, 
	0xff, 0xef, 0xbb, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0xd9, 0xef, 0xbb, 0x00, 
	0x00, 0x7f, 0xc0, 0x00, 0xff, 0xff, 0xa0, 0x0f, 0xf9, 0xef, 0x7b, 0x40, 0x00, 0xff, 0xe0, 0x00, 
	0xff, 0xff, 0xc0, 0x07, 0x7b, 0xef, 0x7b, 0x00, 0x01, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xe0, 0x0f, 
	0x7b, 0xde, 0x76, 0x80, 0x01, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xd0, 0x3b, 0x7b, 0xde, 0xee, 0x00, 
	0x03, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xe0, 0x63, 0x7b, 0x9d, 0xfd, 0x00, 0x03, 0xff, 0xf0, 0x0e, 
	0xff, 0xff, 0x21, 0xc3, 0xf7, 0xbd, 0xfc, 0x00, 0x01, 0xff, 0xf0, 0x3f, 0xaf, 0x5a, 0xc3, 0x02, 
	0xf7, 0x7b, 0xba, 0x00, 0x01, 0xff, 0xc0, 0x7f, 0x29, 0x6f, 0x46, 0x06, 0xef, 0x77, 0xf0, 0x00, 
	0x01, 0xff, 0xe0, 0xfc, 0x04, 0x00, 0x1c, 0x07, 0xee, 0xf7, 0x68, 0x00, 0x00, 0xff, 0x83, 0xf0, 
	0x00, 0x00, 0x30, 0x0f, 0xdd, 0xee, 0xd0, 0x00, 0x01, 0x7f, 0x97, 0xe0, 0x60, 0x00, 0x60, 0x0f, 
	0xfd, 0xdd, 0xa0, 0x00, 0x00, 0xff, 0x4f, 0x83, 0xf0, 0x00, 0x60, 0x1f, 0xbb, 0xbd, 0x40, 0x00, 
	0x01, 0xff, 0xbf, 0x0f, 0xfc, 0x01, 0x80, 0x37, 0x77, 0x36, 0x00, 0x00, 0x03, 0xff, 0xfe, 0x0f, 
	0xfe, 0x01, 0x80, 0x6e, 0xef, 0x7d, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x1f, 0xff, 0x03, 0x00, 0x7d, 
	0xde, 0xf8, 0x00, 0x00, 0x07, 0xff, 0xd0, 0x1f, 0xff, 0x06, 0x00, 0xfb, 0xbd, 0xec, 0x00, 0x00, 
	0x0f, 0xff, 0xe0, 0x3f, 0xff, 0x0c, 0x01, 0xf7, 0x3b, 0xd0, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x3f, 
	0xff, 0x0c, 0x03, 0xfe, 0xf7, 0x40, 0x00, 0x00, 0x1f, 0xff, 0xe8, 0x3f, 0xfd, 0x08, 0x0f, 0xdc, 
	0xee, 0x80, 0x00, 0x00, 0x3f, 0xff, 0xf4, 0x1f, 0xfd, 0x18, 0x0f, 0xbb, 0xda, 0x00, 0x00, 0x00, 
	0x3f, 0xff, 0xf4, 0x1f, 0xfe, 0x18, 0x3f, 0x77, 0xf4, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x0f, 
	0xfc, 0x18, 0x6e, 0xef, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf4, 0x0f, 0xfa, 0x18, 0xff, 0xdf, 
	0x50, 0x00, 0x00, 0x00, 0x5f, 0xff, 0xe4, 0x0f, 0xf0, 0x1d, 0xf7, 0xf5, 0x00, 0x00, 0x00, 0x00, 
	0x0d, 0xff, 0xb8, 0x1f, 0xfc, 0x0e, 0xe7, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb2, 0xc0, 0x3f, 
	0xfa, 0x17, 0xff, 0x20, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe8, 0x00, 0x7f, 0xfc, 0x36, 0x12, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0x60, 0x00, 0x7f, 0xfe, 0xfe, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xc0, 0x00, 0xff, 0xff, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xc0, 0x01, 0xff, 
	0xff, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xc0, 0x01, 0xff, 0xfe, 0xd0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1e, 0xc0, 0x03, 0xff, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1e, 0xc0, 0x03, 0xff, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0xe0, 0x07, 0xff, 
	0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x70, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0x3f, 0xff, 0xff, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0xcf, 0xfc, 0xfb, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x7f, 0xcd, 
	0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0xff, 0xff, 0xb0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfc, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xa0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
//<- Ende Flashdaten

//-> Interne Methoden
bool readConfig();
bool saveConfig();
void writeFile(fs::FS &fs, String content);
String readFile(fs::FS &fs);
//<- Ende Interne Methoden

static uint8_t sensorPayload[]="";

void do_send(osjob_t* j) {
  // Check if there is not a current TX/RX job running
  if (LMIC.opmode & OP_TXRXPEND) {
    Serial.println(F("OP_TXRXPEND, nicht senden"));
  } else {
    // Prepare upstream data transmission at the next possible time.

    LMIC_setTxData2(1, sensorPayload, sizeof(sensorPayload)-1, 0);
    Serial.println(F("Packet in der Warteschlange"));
  }
  // Next TX is scheduled after TX_COMPLETE event.
}

void setup(){
    Serial.begin(115200);
    delay(1000);
    WiFi.disconnect();
    SPI.begin(SCK, MISO, MOSI, SS);
    Serial.println("Starte System....");

    // -> Display initialisierung
	pinMode(OLED_RST, OUTPUT);
	digitalWrite(OLED_RST, LOW);
	delay(20);
	digitalWrite(OLED_RST, HIGH);
	Wire.begin(OLED_SDA, OLED_SCL);
	//Displayinitialisierung ENDE <-

    //PrÃ¼fung ob Display vorhanden
	if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3c, false, false)) { // Address 0x3C for 128x32
		//setz der Variable displayAvailable auf false
		Serial.println("init -> kein LCD vorhanden.");
	} else {
		display.clearDisplay();
		display.drawBitmap(20,0, lcdlogo, 91,64, WHITE);
		display.display();
	}

    //ermitteln der ChipId
	for(int i=0; i< 17; i=i+8) {
		chipId |= ((ESP.getEfuseMac() >> (40 - i)) & 0xff) << i;
	}
	mySSID = std::move(String(DEFAULT_AP_START) + "-" + String(chipId));

	Serial.printf("ESP32 Chip Model = %s Rev %d\n", ESP.getChipModel(), ESP.getChipRevision());
	Serial.printf("Dieser Chip hat %d Kerne\n", ESP.getChipCores());
  	Serial.print("Chip ID: "); Serial.println(chipId);
  	
	if(!SPIFFS.begin(FORMAT_SPIFFS_IF_FAILED)){
		Serial.println("init -> SPIFF Mounting Fehler! System stopped.");
		for(;;);
	}

	Serial.println("init -> SPIFF gemountet.");		

	//Lesen der Konfiguration 'config.json' (wenn) vorhanden
    if(!readConfig()){
        // System in den Konfigmodus stellen
        aktualKonfigMode = KONFIG_MODE;
        
    } else {

    }
}