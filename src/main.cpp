#include <Arduino.h>
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <SPIFFS.h>
#include <ArduinoJson.h>
#include "ESPAsyncWebServer.h"
#include <AsyncTCP.h>

//HTML Style
#include "html_styles.h"
//SetupPage includes
#include "setup_ap.h"


// Alle verwendbaren Module hier laden
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>
#include "DHTesp.h"
#include "SDS011.h"
#include "LoRa.h"

#define SCK 5
#define MISO 19
#define MOSI 27
#define SS 18
#define RST 14
#define DIO0 26

#define SCREEN_WIDTH 128 // OLED display width, in pixels
#define SCREEN_HEIGHT 64 // OLED display height, in pixels
#define FORMAT_SPIFFS_IF_FAILED true
#define DEFAULT_AP_START "BGN" 

//Frequenzbereich für Europa
#define BAND 866E6

AsyncWebServer server(80);

//Unsere SSID im AP Mode = BGN-CHIPID
String mySSID ="";

uint32_t chipId = 0;
bool loraAvailable = false;

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RST);
const char esp_default_config[] PROGMEM = R"rawliteral(
{
	"wifi": {
		"ssid":"",
		"password":""
	},
	"location":{
		"latitude": 0,
		"longitude": 0,
		"height": 0
	},
	"lora":{
		"enabled": true,
		"c0": true,
		"c1": true,
		"c2": true,
		"c3": true,
		"c4": true,
		"c5": true,
		"c6": true,
		"c7": true,
	}
}	
)rawliteral";
StaticJsonDocument<512> config;

bool readConfig();
bool saveConfig();
void writeFile(fs::FS &fs, String content);
String readFile(fs::FS &fs);
void setAPMode();
bool checkWiFi();
void setupLAN();
String htmlProcessor(const String& var);

const unsigned char lcdlogo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x80, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfe, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x07, 0xfe, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfd, 0x01, 0xff, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0x3f, 0xff, 0xc0, 0x1f, 0xf8, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0xfe, 0xff, 0xff, 0xf0, 0xff, 0xbe, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0xff, 0x7e, 0x9f, 0xf7, 0xe7, 0xb6, 0x40, 0x00, 0x08, 0x00, 0x00, 0x3f, 0xff, 0xbf, 0xf3, 
	0xff, 0xef, 0xbb, 0x00, 0x00, 0x3f, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xfc, 0xd9, 0xef, 0xbb, 0x00, 
	0x00, 0x7f, 0xc0, 0x00, 0xff, 0xff, 0xa0, 0x0f, 0xf9, 0xef, 0x7b, 0x40, 0x00, 0xff, 0xe0, 0x00, 
	0xff, 0xff, 0xc0, 0x07, 0x7b, 0xef, 0x7b, 0x00, 0x01, 0xff, 0xe0, 0x01, 0xff, 0xff, 0xe0, 0x0f, 
	0x7b, 0xde, 0x76, 0x80, 0x01, 0xff, 0xf0, 0x01, 0xff, 0xff, 0xd0, 0x3b, 0x7b, 0xde, 0xee, 0x00, 
	0x03, 0xff, 0xe0, 0x03, 0xff, 0xff, 0xe0, 0x63, 0x7b, 0x9d, 0xfd, 0x00, 0x03, 0xff, 0xf0, 0x0e, 
	0xff, 0xff, 0x21, 0xc3, 0xf7, 0xbd, 0xfc, 0x00, 0x01, 0xff, 0xf0, 0x3f, 0xaf, 0x5a, 0xc3, 0x02, 
	0xf7, 0x7b, 0xba, 0x00, 0x01, 0xff, 0xc0, 0x7f, 0x29, 0x6f, 0x46, 0x06, 0xef, 0x77, 0xf0, 0x00, 
	0x01, 0xff, 0xe0, 0xfc, 0x04, 0x00, 0x1c, 0x07, 0xee, 0xf7, 0x68, 0x00, 0x00, 0xff, 0x83, 0xf0, 
	0x00, 0x00, 0x30, 0x0f, 0xdd, 0xee, 0xd0, 0x00, 0x01, 0x7f, 0x97, 0xe0, 0x60, 0x00, 0x60, 0x0f, 
	0xfd, 0xdd, 0xa0, 0x00, 0x00, 0xff, 0x4f, 0x83, 0xf0, 0x00, 0x60, 0x1f, 0xbb, 0xbd, 0x40, 0x00, 
	0x01, 0xff, 0xbf, 0x0f, 0xfc, 0x01, 0x80, 0x37, 0x77, 0x36, 0x00, 0x00, 0x03, 0xff, 0xfe, 0x0f, 
	0xfe, 0x01, 0x80, 0x6e, 0xef, 0x7d, 0x00, 0x00, 0x03, 0xff, 0xfc, 0x1f, 0xff, 0x03, 0x00, 0x7d, 
	0xde, 0xf8, 0x00, 0x00, 0x07, 0xff, 0xd0, 0x1f, 0xff, 0x06, 0x00, 0xfb, 0xbd, 0xec, 0x00, 0x00, 
	0x0f, 0xff, 0xe0, 0x3f, 0xff, 0x0c, 0x01, 0xf7, 0x3b, 0xd0, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x3f, 
	0xff, 0x0c, 0x03, 0xfe, 0xf7, 0x40, 0x00, 0x00, 0x1f, 0xff, 0xe8, 0x3f, 0xfd, 0x08, 0x0f, 0xdc, 
	0xee, 0x80, 0x00, 0x00, 0x3f, 0xff, 0xf4, 0x1f, 0xfd, 0x18, 0x0f, 0xbb, 0xda, 0x00, 0x00, 0x00, 
	0x3f, 0xff, 0xf4, 0x1f, 0xfe, 0x18, 0x3f, 0x77, 0xf4, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xf8, 0x0f, 
	0xfc, 0x18, 0x6e, 0xef, 0xc0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xf4, 0x0f, 0xfa, 0x18, 0xff, 0xdf, 
	0x50, 0x00, 0x00, 0x00, 0x5f, 0xff, 0xe4, 0x0f, 0xf0, 0x1d, 0xf7, 0xf5, 0x00, 0x00, 0x00, 0x00, 
	0x0d, 0xff, 0xb8, 0x1f, 0xfc, 0x0e, 0xe7, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xb2, 0xc0, 0x3f, 
	0xfa, 0x17, 0xff, 0x20, 0x00, 0x00, 0x00, 0x00, 0x07, 0xe8, 0x00, 0x7f, 0xfc, 0x36, 0x12, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0x60, 0x00, 0x7f, 0xfe, 0xfe, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x0f, 0xc0, 0x00, 0xff, 0xff, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xc0, 0x01, 0xff, 
	0xff, 0xf4, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0xc0, 0x01, 0xff, 0xfe, 0xd0, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1e, 0xc0, 0x03, 0xff, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1e, 0xc0, 0x03, 0xff, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0xe0, 0x07, 0xff, 
	0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x70, 0x03, 0xff, 0xff, 0x80, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x1f, 0x3f, 0xff, 0xff, 0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x1f, 0xcf, 0xfc, 0xfb, 0x69, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xf8, 0x7f, 0xcd, 
	0x54, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4f, 0xff, 0xff, 0xb0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xfc, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x01, 0xa0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void setup() {
	Serial.begin(115200);
	delay(1000);
	WiFi.disconnect();
	// -> Display initialisierung
	pinMode(OLED_RST, OUTPUT);
	digitalWrite(OLED_RST, LOW);
	delay(20);
	digitalWrite(OLED_RST, HIGH);
	Wire.begin(OLED_SDA, OLED_SCL);
	//Displayinitialisierung ENDE <-

	//Prüfung ob Display vorhanden
	if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3c, false, false)) { // Address 0x3C for 128x32
		//setz der Variable displayAvailable auf false
		Serial.println("init -> kein LCD vorhanden.");
	} else {
		display.clearDisplay();
		display.drawBitmap(20,0, lcdlogo, 91,64, WHITE);
		display.display();
	}
	
	//ermitteln der ChipId
	for(int i=0; i< 17; i=i+8) {
		chipId |= ((ESP.getEfuseMac() >> (40 - i)) & 0xff) << i;
	}
	mySSID = std::move(String(DEFAULT_AP_START) + "-" + String(chipId));

	Serial.printf("ESP32 Chip model = %s Rev %d\n", ESP.getChipModel(), ESP.getChipRevision());
	Serial.printf("This chip has %d cores\n", ESP.getChipCores());
  	Serial.print("Chip ID: "); Serial.println(chipId);
  	
	if(!SPIFFS.begin(FORMAT_SPIFFS_IF_FAILED)){
		Serial.println("init -> SPIFF Mounting Fehler!");
	}
	else{
		Serial.println("init -> SPIFF gemountet.");
		
	}
	//Pins für LoRa definieren und Kommunikation starten
	SPI.begin(SCK, MISO, MOSI, SS);
	LoRa.setPins(SS, RST, DIO0);
	if(!LoRa.begin(BAND)){
		Serial.println("init -> LoRa nicht verfügbar...");
		loraAvailable = false;
	} else{
		int rssi = LoRa.rssi();
		Serial.print("init -> LoRa RSSI=");
		Serial.print(rssi);
		Serial.println("dBm.");
		loraAvailable = true;
	}

	//Lesen der Konfiguration
	if(!readConfig()){
		// MCU in den Konfigmodus setzen
		Serial.println("System wurde noch nicht konfiguriert.");
		setAPMode();
	} else {
		if((!config["lora"]["enabled"] || !loraAvailable ) && config["wifi"]["ssid"] == ""){
			//MCU in den KonfigModus setzen
			setAPMode();
		}
		else {
			
  			
  			
		}
		
	}

	// -> WLAN Initinitilisierung

	// WLAN Initialisierung ENDE <-

	// -> Lorawan inititialiseirung

	// Lorawan Initialisierung ENDE <-

}

bool checkWiFi(){
	int c = 0;
	Serial.println("Warte auf WiFi Verbindung...");
	display.clearDisplay();
	display.setTextSize(1);
	display.setCursor(0,0);
	display.println("Verbinde zu WLAN....");
	while (c < 20)
	{
		if(WiFi.status() == WL_CONNECTED){
			return true;
		}
		delay(500);
		Serial.print("*");
		display.setCursor(c,1);
		display.print("*");
		c++;
	}
	Serial.println("");
	Serial.println("Verbindungstimeout. Starte Accesspoint");
	return false;
}

void setAPMode(){
	Serial.println("starte AccessPoint...");
	WiFi.mode(WIFI_STA);
	WiFi.softAP(mySSID,"");
	Serial.print("Meine SSID lautet: ");
	Serial.println(mySSID);
	display.clearDisplay();
	display.setCursor(10,0);
	display.print("AP");
	display.setCursor(5,2);
	display.print("ACCESSPOINT MODUS");
	display.setCursor(5,4);
	display.print(mySSID);
	setupLAN();
}

String htmlProcessor(const String& var) {
	if(var == "ESP_STYLES"){
		RESERVE_STRING(b, LARGE_STR);
		b= FPSTR(styles);
		return b;
	}
		
	return String();
}

void setupLAN() {
	server.on("/", HTTP_GET , [](AsyncWebServerRequest *request) {
		AsyncWebServerResponse *response = request->beginResponse_P(200, "text/html", setup_index, htmlProcessor);
		request->send(response);
	});

	server.begin();
}
void loop() {
  // put your main code here, to run repeatedly:
}

bool readConfig(){
	String file_content = readFile(SPIFFS);

	int config_file_size = file_content.length();
	if(config_file_size > 512){
		Serial.println("config -> Datei zu groß!" );
		auto error = deserializeJson(config, esp_default_config);
		return false;
	}

	auto error = deserializeJson(config, file_content);
	if(error){
		Serial.println("config -> Fehler beim lesen der Konfig!");
		auto error = deserializeJson(config, esp_default_config);
		if(error){
			Serial.println("Fehler beim laden der Defaultkonfiguration!");
		}
		return false;
	}
}

bool saveConfig(){
	String content = "";
	serializeJson(config, content);
	writeFile(SPIFFS, content);
	return true;
}

String readFile(fs::FS &fs){
	Serial.print("config -> lese Konfigurationsdatei... ");
	File file = fs.open("/config.json");
	if(!file || file.isDirectory()){
		Serial.println(" [nicht vorhanden]");
		return "";
	}

	String fileText = "";
	while (file.available())
	{
		fileText = file.readString();
	}
	file.close();
	return fileText;
}

void writeFile(fs::FS &fs, String content) {
	Serial.println("config -> schreibe Konfigdatei...");

	File file = fs.open("/config.json", FILE_WRITE);
	if(!file){
		Serial.println("config -> Fehler beim schreiben der config!");
		return;
	}

	if(file.print(content)){
		Serial.println("config -> Konfiguration erfolgreich gespeichert.");
	} else{
		Serial.println("config -> Fehler beim schreiben der Konfiguration!");
	}
	file.close();
}
